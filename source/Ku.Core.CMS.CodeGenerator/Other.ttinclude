<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ Assembly Name="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #> 
<#
	var pathOfProfile = RootPath + "/Ku.Core.CMS.Domain";
    if(!Directory.Exists(pathOfProfile))
    {
        Directory.CreateDirectory(pathOfProfile);
    }
	manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = pathOfProfile};
	var fileNameOfProfile = "EntityMapperProfile.cs";
	manager.StartBlock(fileNameOfProfile);
#>
//----------------------------------------------------------------
// Copyright (C) 2018 kulend 版权所有
//
// 文件名：EntityMapperProfile.cs
// 功能描述：AutoMapper初始化
//
// 创建者：kulend@qq.com
// 创建时间：2018-02-04 19:13
// 说明：此代码由工具自动生成，对此文件的更改可能会导致不正确的行为，
// 并且如果重新生成代码，这些更改将会丢失。
//
//----------------------------------------------------------------

using AutoMapper;
using AutoMapper.Configuration;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Ku.Core.CMS.Domain
{
    public class EntityMapperProfile : Profile
    {
        public EntityMapperProfile()
        {
            //<#=area#>
            CreateMap<Domain.Entity.<#=area#>.<#=name#>, Domain.Dto.<#=area#>.<#=name#>Dto>().ReverseMap();
		}

        private class JsonSerializeResolver : IMemberValueResolver<object, object, object, string>
        {
            public string Resolve(object source, object destination, object sourceMember, string destMember, ResolutionContext context)
            {
                if (sourceMember == null)
                {
                    return null;
                }
                return JsonConvert.SerializeObject(sourceMember);
            }
        }

        private class JsonDeserializeResolver<T> : IMemberValueResolver<object, object, string, T>
        {
            public T Resolve(object source, object destination, string sourceMember, T destMember, ResolutionContext context)
            {
                if (context.Items.ContainsKey("JsonDeserializeIgnore")
                    && (bool)context.Items["JsonDeserializeIgnore"])
                {
                    return default(T);
                }
                if (sourceMember == null)
                {
                    return default(T);
                }
                return JsonConvert.DeserializeObject<T>(sourceMember);
            }
        }
    }
}
<#
	manager.EndBlock();
	manager.Process(true);
#>